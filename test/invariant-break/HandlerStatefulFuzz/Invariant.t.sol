// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {YieldERC20} from "../../mocks/YieldERC20.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Handler} from "./Handler.t.sol";

contract InvariantBreakHardTest is StdInvariant, Test {
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    YieldERC20 yieldERC20;
    MockUSDC mockUSDC;
    IERC20[] public supportedTokens;
    uint256 public startingAmount;

    address owner = makeAddr("owner");

    Handler handler;

    function setUp() public {
        vm.startPrank(owner);
        // Give our owner 1M tokens each
        yieldERC20 = new YieldERC20();
        startingAmount = yieldERC20.INITIAL_SUPPLY();
        mockUSDC = new MockUSDC();
        mockUSDC.mint(owner, startingAmount);

        supportedTokens.push(mockUSDC);
        supportedTokens.push(yieldERC20);
        handlerStatefulFuzzCatches = new HandlerStatefulFuzzCatches(supportedTokens);
        vm.stopPrank();

        handler = new Handler(handlerStatefulFuzzCatches, yieldERC20, mockUSDC);

        bytes4[] memory selectors = new bytes4[](3);
        selectors[0] = handler.depositYieldERC20.selector;
        selectors[1] = handler.withdrawYieldERC20.selector;
        selectors[2] = handler.withdrawMockUSDC.selector;

        targetSelector(FuzzSelector({addr: address(handler), selectors: selectors}));
        targetContract(address(handler));
    }

    // // THIS however, catches our bug!!!
    // function statefulFuzz_testInvariantBreakHandler() public {
    //     vm.startPrank(owner);
    //     handlerStatefulFuzzCatches.withdrawToken(mockUSDC);
    //     handlerStatefulFuzzCatches.withdrawToken(yieldERC20);
    //     vm.stopPrank();

    //     assert(mockUSDC.balanceOf(address(handlerStatefulFuzzCatches)) == 0);
    //     assert(yieldERC20.balanceOf(address(handlerStatefulFuzzCatches)) == 0);
    //     assert(mockUSDC.balanceOf(owner) == startingAmount);
    //     assert(yieldERC20.balanceOf(owner) == startingAmount);
    // }
}
